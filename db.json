{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"4fb7324447e83446c6e98deb511d40f9e94a494b","modified":1635266380681},{"_id":"source/_posts/再学JavaScript.md","hash":"8b10877e9caf29e1c557101fcf53e50c14aa9faa","modified":1635185924652},{"_id":"source/about/index.md","hash":"e7898c693b33c84be16d0a4c9ec08955fbb394ba","modified":1635184544165},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"cd5cbd070b6190aa0b4839400c0a1581e2654470","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"18f04247801549fe78600c1ee9c601fcbea4cab3","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"666476260a2cead2cc2928d51977c4a7ba8de6bb","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"7d0cf31f2595cfe6d5ad31d569654f21a00dfd77","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"8e33f915028ac56258f6999d19b1ad8d800cecfe","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"a7ed1d3079c32497c8955ca75f5fb6992e5ffb8b","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ece659572cf4e12638a1607fca512c25098bbd82","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"63aedd67d90d641cc672540db20ef615f528c9f1","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"cd55a2dce6b9d3e165a0a26d0b5bf7f649006bcd","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"c66e0da2c0d05e76a686a77ab4e74f0d2e89777d","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1635179073263},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1635179073263}],"Category":[{"name":"读书笔记","_id":"ckv8bitrs00036rgseh1s6bfu"},{"name":"’","parent":"ckv8bitrs00036rgseh1s6bfu","_id":"ckv8biw4r00056rgs8t646ehs"},{"name":"’‘","parent":"ckv8bitrs00036rgseh1s6bfu","_id":"ckv8bixlf00076rgsbkchh0z6"},{"name":"’JavaScript‘","parent":"ckv8bitrs00036rgseh1s6bfu","_id":"ckv8bj34q00096rgs0kghe13s"}],"Data":[],"Page":[{"title":"about","layout":"about","_content":"这里写关于页的正文，支持 Markdown, HTML\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\n---\n这里写关于页的正文，支持 Markdown, HTML\n","date":"2021-10-25T17:55:44.165Z","updated":"2021-10-25T17:55:44.165Z","path":"about/index.html","comments":1,"_id":"ckv8bf38m00016rgs9lqr26gn","content":"<p>这里写关于页的正文，支持 Markdown, HTML</p>\n","site":{"data":{}},"wordcount":25,"excerpt":"","more":"<p>这里写关于页的正文，支持 Markdown, HTML</p>\n"}],"Post":[{"title":"再学JavaScript","date":"2020-02-23T11:20:33.000Z","_content":"博主17\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/再学JavaScript.md","raw":"---\ntitle: 再学JavaScript\ndate: 2020-02-23 19:20:33\n---\n博主17\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"再学JavaScript","published":1,"updated":"2020-02-23T11:20:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv8bf38i00006rgs8iy866ec","content":"<p>博主17</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":212,"excerpt":"","more":"<p>博主17</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"读书笔记--《JavaScript教程》《JavaScript高级程序设计》关键知识点笔记","date":"2020-09-23T11:20:33.000Z","comments":1,"_content":"\n此篇是博主在阅读这两本JavaScript入门书籍时记得一些笔记，以及一些知识点，长期更新，文中有错误欢迎指正，有不同理解欢迎交流。\n\n<!-- more -->\n\n## 一.数据类型\n\n在es5之前总共有：*null* *undefined* *boolean* *object* *function* *number* 六种数据类型，es6新增了 *symbol* ,es11新增了 *bigint* \n\n所以截止es2021，目前总共有：*null* *undefined* *boolean* *object* *function* *number* *symbol* *bigint* 基本数据类型\n\nps：这些也是 `typeof` 能返回的所有值\n\n### 数据类型判断的三个原生方法\n\n#### 1.`typeof`\n数值、字符串、布尔值分别返回number、string、boolean，函数返回function，undefined返回undefined，对象返回object，null返回object。\n\nps：`typeof null // object` 其实是历史原因,1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑null，只把它当作object的一种特殊值。后来null独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null返回object就没法改变了。\n\n#### 2.`instanceof` \n`instanceof` 运算符返回一个布尔值，表示对象是否为某个构造函数的实例。\n\n`instanceof` 是基于原型链查找，运算符的左边是实例对象，右边是构造函数。它会检查右边构造函数的原型对象（prototype），是否在左边对象的原型链上。因此，下面两种写法是等价的。\n```\nconst v = new Vehicle()\nv instanceof Vehicle\n// 等同于\nVehicle.prototype.isPrototypeOf(v)\n```\n#### 3.`Object.prototype.toString`\n因为大部分数据类型都自定义重写了toString方法，一次可以根据此方法的返回值去判断数据类型\n```\n数值：返回[object Number]。\n字符串：返回[object String]。\n布尔值：返回[object Boolean]。\nundefined：返回[object Undefined]。\nnull：返回[object Null]。\n数组：返回[object Array]。\narguments 对象：返回[object Arguments]。\n函数：返回[object Function]。\nError 对象：返回[object Error]。\nDate 对象：返回[object Date]。\nRegExp 对象：返回[object RegExp]。\n其他对象：返回[object Object]。\nsymbol对象：返回Symbol()\n```\n\n## 二.运算符\n加法运算符：`x + y`   \n减法运算符： `x - y`  \n乘法运算符： `x * y`  \n除法运算符：`x / y`  \n指数运算符：`x ** y`  \n余数运算符：`x % y`  \n自增运算符：`++x 或者 x++`  \n自减运算符：`--x 或者 x--`  \n数值运算符： `+x`  \n负数值运算符：`-x`  \n\n### 加法运算符 `+`\n上面这些运算符号值得说的其实就是 `+` 运算符，加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。\n比如：\n```\n 1 + true // 2\n '3' + 4 + 5 // \"345\"\n 3 + 4 + '5' // \"75\"\n```\n### 指数运算符 `**` \n```\n 2 ** 4 // 16\n```\n指数运算符需要注意的是，指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。\n```\n// 相当于 2 ** (3 ** 2)\n 2 ** 3 ** 2\n// 512\n```\n### 布尔运算符\n布尔运算符就以下四种：  \n* 取反运算符：`!`\n* 且运算符：`&&`\n* 或运算符：`||`\n* 三元运算符：`?:`\n\n#### 1.取反运算符：`!`\n`!`运算符会把布尔值变成相反值，值得注意的是也能对非布尔值取反，只要记住以下取反是`true`其他都是`false`:  \n* `undefined`\n* `null`\n* `false`\n* `0`\n* `NaN`\n* `''`\n  \n小tips：对一个变量两次取反就是把变量变成对应的`boolean`值，相当于`Boolean()`方法\n```\n!!x\n// 等同于\nBoolean(x)\n```\n\n#### 2.且运算符：`&&`\n它的运算规则是：如果第一个运算子的布尔值为 `true`，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为 `false`，则直接返回第一个运算子的值，且不再对第二个运算子求值。  \nps：经常拿来代替 `if`\n```\nif (i) {\n  doSomething();\n}\n// 等价于\ni && doSomething();\n```\n#### 3.或运算符：`||`\n它的运算规则是：如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为false，则返回第二个运算子的值。  \nps：经常拿来设置一个变量的默认值\n```\nconst str = new String() || ''\n```\n\n#### 4.三元运算符：`?:`\n三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为true，则返回第二个表达式的值，否则返回第三个表达式的值。  \nps: 经常拿来代替if else 非常的简便好用,而且具有返回值\n```\nconst isBoy = sex==='男' ? true : false\n```\n### 位运算符\n二进制位运算符用于直接对二进制位进行计算，一共有7个。\n\n* 二进制或运算符（or）：符号为`|`，表示若两个二进制位都为0，则结果为0，否则为1。\n* 二进制与运算符（and）：符号为`&`，表示若两个二进制位都为1，则结果为1，否则为0。\n* 二进制否运算符（not）：符号为`~`，表示对一个二进制位取反。\n* 异或运算符（xor）：符号为`^`，表示若两个二进制位不相同，则结果为1，否则为0。\n* 左移运算符（left shift）：符号为`<<`。\n* 右移运算符（right shift）：符号为`>>`。\n* 头部补零的右移运算符（zero filled right shift）：符号为`>>>`。\n\n有一点需要特别注意，位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。\n\n前四个根据上面的字面意思自己理解，这里写一些比较有意思的位运算操作:  \n```\n// 把i转成成一个整数\ni = i | 0 \n\n// 不依赖第三个变量交换ab的值\nvar a = 10;\nvar b = 99;\na ^= b, b ^= a, a ^= b;\na // 99\nb // 10\n```\n#### 左移运算符 `<<`\n左移运算符（<<）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。向左移动的时候，最高位的符号位是一起移动的。\n#### 右移运算符 `>>`\n右移运算符（>>）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补0；如果是负数，头部全部补1。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。\n#### 左移运算符 `>>>`\n头部补零的右移运算符（>>>）与右移运算符（>>）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（>>）完全一致，区别主要在于负数。  \n查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。\n```\n-1 >>> 0 // 4294967295\n```\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 读书笔记--《JavaScript教程》《JavaScript高级程序设计》关键知识点笔记\ndate: 2020-09-23 19:20:33\ncategories: ['读书笔记']\ntag: ['笔记','学习','JavaScript']\ncomments: true\n---\n\n此篇是博主在阅读这两本JavaScript入门书籍时记得一些笔记，以及一些知识点，长期更新，文中有错误欢迎指正，有不同理解欢迎交流。\n\n<!-- more -->\n\n## 一.数据类型\n\n在es5之前总共有：*null* *undefined* *boolean* *object* *function* *number* 六种数据类型，es6新增了 *symbol* ,es11新增了 *bigint* \n\n所以截止es2021，目前总共有：*null* *undefined* *boolean* *object* *function* *number* *symbol* *bigint* 基本数据类型\n\nps：这些也是 `typeof` 能返回的所有值\n\n### 数据类型判断的三个原生方法\n\n#### 1.`typeof`\n数值、字符串、布尔值分别返回number、string、boolean，函数返回function，undefined返回undefined，对象返回object，null返回object。\n\nps：`typeof null // object` 其实是历史原因,1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑null，只把它当作object的一种特殊值。后来null独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null返回object就没法改变了。\n\n#### 2.`instanceof` \n`instanceof` 运算符返回一个布尔值，表示对象是否为某个构造函数的实例。\n\n`instanceof` 是基于原型链查找，运算符的左边是实例对象，右边是构造函数。它会检查右边构造函数的原型对象（prototype），是否在左边对象的原型链上。因此，下面两种写法是等价的。\n```\nconst v = new Vehicle()\nv instanceof Vehicle\n// 等同于\nVehicle.prototype.isPrototypeOf(v)\n```\n#### 3.`Object.prototype.toString`\n因为大部分数据类型都自定义重写了toString方法，一次可以根据此方法的返回值去判断数据类型\n```\n数值：返回[object Number]。\n字符串：返回[object String]。\n布尔值：返回[object Boolean]。\nundefined：返回[object Undefined]。\nnull：返回[object Null]。\n数组：返回[object Array]。\narguments 对象：返回[object Arguments]。\n函数：返回[object Function]。\nError 对象：返回[object Error]。\nDate 对象：返回[object Date]。\nRegExp 对象：返回[object RegExp]。\n其他对象：返回[object Object]。\nsymbol对象：返回Symbol()\n```\n\n## 二.运算符\n加法运算符：`x + y`   \n减法运算符： `x - y`  \n乘法运算符： `x * y`  \n除法运算符：`x / y`  \n指数运算符：`x ** y`  \n余数运算符：`x % y`  \n自增运算符：`++x 或者 x++`  \n自减运算符：`--x 或者 x--`  \n数值运算符： `+x`  \n负数值运算符：`-x`  \n\n### 加法运算符 `+`\n上面这些运算符号值得说的其实就是 `+` 运算符，加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。\n比如：\n```\n 1 + true // 2\n '3' + 4 + 5 // \"345\"\n 3 + 4 + '5' // \"75\"\n```\n### 指数运算符 `**` \n```\n 2 ** 4 // 16\n```\n指数运算符需要注意的是，指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。\n```\n// 相当于 2 ** (3 ** 2)\n 2 ** 3 ** 2\n// 512\n```\n### 布尔运算符\n布尔运算符就以下四种：  \n* 取反运算符：`!`\n* 且运算符：`&&`\n* 或运算符：`||`\n* 三元运算符：`?:`\n\n#### 1.取反运算符：`!`\n`!`运算符会把布尔值变成相反值，值得注意的是也能对非布尔值取反，只要记住以下取反是`true`其他都是`false`:  \n* `undefined`\n* `null`\n* `false`\n* `0`\n* `NaN`\n* `''`\n  \n小tips：对一个变量两次取反就是把变量变成对应的`boolean`值，相当于`Boolean()`方法\n```\n!!x\n// 等同于\nBoolean(x)\n```\n\n#### 2.且运算符：`&&`\n它的运算规则是：如果第一个运算子的布尔值为 `true`，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为 `false`，则直接返回第一个运算子的值，且不再对第二个运算子求值。  \nps：经常拿来代替 `if`\n```\nif (i) {\n  doSomething();\n}\n// 等价于\ni && doSomething();\n```\n#### 3.或运算符：`||`\n它的运算规则是：如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为false，则返回第二个运算子的值。  \nps：经常拿来设置一个变量的默认值\n```\nconst str = new String() || ''\n```\n\n#### 4.三元运算符：`?:`\n三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为true，则返回第二个表达式的值，否则返回第三个表达式的值。  \nps: 经常拿来代替if else 非常的简便好用,而且具有返回值\n```\nconst isBoy = sex==='男' ? true : false\n```\n### 位运算符\n二进制位运算符用于直接对二进制位进行计算，一共有7个。\n\n* 二进制或运算符（or）：符号为`|`，表示若两个二进制位都为0，则结果为0，否则为1。\n* 二进制与运算符（and）：符号为`&`，表示若两个二进制位都为1，则结果为1，否则为0。\n* 二进制否运算符（not）：符号为`~`，表示对一个二进制位取反。\n* 异或运算符（xor）：符号为`^`，表示若两个二进制位不相同，则结果为1，否则为0。\n* 左移运算符（left shift）：符号为`<<`。\n* 右移运算符（right shift）：符号为`>>`。\n* 头部补零的右移运算符（zero filled right shift）：符号为`>>>`。\n\n有一点需要特别注意，位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。\n\n前四个根据上面的字面意思自己理解，这里写一些比较有意思的位运算操作:  \n```\n// 把i转成成一个整数\ni = i | 0 \n\n// 不依赖第三个变量交换ab的值\nvar a = 10;\nvar b = 99;\na ^= b, b ^= a, a ^= b;\na // 99\nb // 10\n```\n#### 左移运算符 `<<`\n左移运算符（<<）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。向左移动的时候，最高位的符号位是一起移动的。\n#### 右移运算符 `>>`\n右移运算符（>>）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补0；如果是负数，头部全部补1。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。\n#### 左移运算符 `>>>`\n头部补零的右移运算符（>>>）与右移运算符（>>）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（>>）完全一致，区别主要在于负数。  \n查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。\n```\n-1 >>> 0 // 4294967295\n```\n\n","slug":"hello-world","published":1,"updated":"2020-09-23T11:20:33.000Z","_id":"ckv8bf38n00026rgs2gxo0z1i","layout":"post","photos":[],"link":"","content":"<p>此篇是博主在阅读这两本JavaScript入门书籍时记得一些笔记，以及一些知识点，长期更新，文中有错误欢迎指正，有不同理解欢迎交流。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一-数据类型\"><a href=\"#一-数据类型\" class=\"headerlink\" title=\"一.数据类型\"></a>一.数据类型</h2><p>在es5之前总共有：<em>null</em> <em>undefined</em> <em>boolean</em> <em>object</em> <em>function</em> <em>number</em> 六种数据类型，es6新增了 <em>symbol</em> ,es11新增了 <em>bigint</em> </p>\n<p>所以截止es2021，目前总共有：<em>null</em> <em>undefined</em> <em>boolean</em> <em>object</em> <em>function</em> <em>number</em> <em>symbol</em> <em>bigint</em> 基本数据类型</p>\n<p>ps：这些也是 <code>typeof</code> 能返回的所有值</p>\n<h3 id=\"数据类型判断的三个原生方法\"><a href=\"#数据类型判断的三个原生方法\" class=\"headerlink\" title=\"数据类型判断的三个原生方法\"></a>数据类型判断的三个原生方法</h3><h4 id=\"1-typeof\"><a href=\"#1-typeof\" class=\"headerlink\" title=\"1.typeof\"></a>1.<code>typeof</code></h4><p>数值、字符串、布尔值分别返回number、string、boolean，函数返回function，undefined返回undefined，对象返回object，null返回object。</p>\n<p>ps：<code>typeof null // object</code> 其实是历史原因,1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑null，只把它当作object的一种特殊值。后来null独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null返回object就没法改变了。</p>\n<h4 id=\"2-instanceof\"><a href=\"#2-instanceof\" class=\"headerlink\" title=\"2.instanceof\"></a>2.<code>instanceof</code></h4><p><code>instanceof</code> 运算符返回一个布尔值，表示对象是否为某个构造函数的实例。</p>\n<p><code>instanceof</code> 是基于原型链查找，运算符的左边是实例对象，右边是构造函数。它会检查右边构造函数的原型对象（prototype），是否在左边对象的原型链上。因此，下面两种写法是等价的。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">const v = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Vehicle()</span><br>v instanceof Vehicle<br><span class=\"hljs-comment\">// 等同于</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Vehicle</span>.</span></span>prototype.is<span class=\"hljs-constructor\">PrototypeOf(<span class=\"hljs-params\">v</span>)</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"3-Object-prototype-toString\"><a href=\"#3-Object-prototype-toString\" class=\"headerlink\" title=\"3.Object.prototype.toString\"></a>3.<code>Object.prototype.toString</code></h4><p>因为大部分数据类型都自定义重写了toString方法，一次可以根据此方法的返回值去判断数据类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">数值：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Number</span>]。<br>字符串：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">String</span>]。<br>布尔值：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Boolean</span>]。<br><span class=\"hljs-literal\">undefined</span>：返回[<span class=\"hljs-built_in\">object</span> Undefined]。<br><span class=\"hljs-literal\">null</span>：返回[<span class=\"hljs-built_in\">object</span> Null]。<br>数组：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Array</span>]。<br><span class=\"hljs-built_in\">arguments</span> 对象：返回[<span class=\"hljs-built_in\">object</span> Arguments]。<br>函数：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Function</span>]。<br><span class=\"hljs-built_in\">Error</span> 对象：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Error</span>]。<br><span class=\"hljs-built_in\">Date</span> 对象：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Date</span>]。<br><span class=\"hljs-built_in\">RegExp</span> 对象：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">RegExp</span>]。<br>其他对象：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Object</span>]。<br>symbol对象：返回<span class=\"hljs-built_in\">Symbol</span>()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二-运算符\"><a href=\"#二-运算符\" class=\"headerlink\" title=\"二.运算符\"></a>二.运算符</h2><p>加法运算符：<code>x + y</code><br>减法运算符： <code>x - y</code><br>乘法运算符： <code>x * y</code><br>除法运算符：<code>x / y</code><br>指数运算符：<code>x ** y</code><br>余数运算符：<code>x % y</code><br>自增运算符：<code>++x 或者 x++</code><br>自减运算符：<code>--x 或者 x--</code><br>数值运算符： <code>+x</code><br>负数值运算符：<code>-x</code>  </p>\n<h3 id=\"加法运算符\"><a href=\"#加法运算符\" class=\"headerlink\" title=\"加法运算符 +\"></a>加法运算符 <code>+</code></h3><p>上面这些运算符号值得说的其实就是 <code>+</code> 运算符，加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。<br>比如：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span>+ true // <span class=\"hljs-number\">2</span><br><span class=\"hljs-comment\">&#x27;3&#x27; + 4 + 5 // &quot;345&quot;</span><br><span class=\"hljs-symbol\">3 </span>+ <span class=\"hljs-number\">4</span> + <span class=\"hljs-comment\">&#x27;5&#x27; // &quot;75&quot;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"指数运算符\"><a href=\"#指数运算符\" class=\"headerlink\" title=\"指数运算符 **\"></a>指数运算符 <code>**</code></h3><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">2 </span>** <span class=\"hljs-number\">4</span> // <span class=\"hljs-number\">16</span><br></code></pre></td></tr></table></figure>\n<p>指数运算符需要注意的是，指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 相当于 <span class=\"hljs-number\">2</span> ** (<span class=\"hljs-number\">3</span> ** <span class=\"hljs-number\">2</span>)<br> <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">3</span> ** <span class=\"hljs-number\">2</span><br><span class=\"hljs-regexp\">//</span> <span class=\"hljs-number\">512</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h3><p>布尔运算符就以下四种：  </p>\n<ul>\n<li>取反运算符：<code>!</code></li>\n<li>且运算符：<code>&amp;&amp;</code></li>\n<li>或运算符：<code>||</code></li>\n<li>三元运算符：<code>?:</code></li>\n</ul>\n<h4 id=\"1-取反运算符：\"><a href=\"#1-取反运算符：\" class=\"headerlink\" title=\"1.取反运算符：!\"></a>1.取反运算符：<code>!</code></h4><p><code>!</code>运算符会把布尔值变成相反值，值得注意的是也能对非布尔值取反，只要记住以下取反是<code>true</code>其他都是<code>false</code>:  </p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code></li>\n</ul>\n<p>小tips：对一个变量两次取反就是把变量变成对应的<code>boolean</code>值，相当于<code>Boolean()</code>方法</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">!!x<br><span class=\"hljs-comment\">// 等同于</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">Boolean</span><span class=\"hljs-params\">(x)</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-且运算符：-amp-amp\"><a href=\"#2-且运算符：-amp-amp\" class=\"headerlink\" title=\"2.且运算符：&amp;&amp;\"></a>2.且运算符：<code>&amp;&amp;</code></h4><p>它的运算规则是：如果第一个运算子的布尔值为 <code>true</code>，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为 <code>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。<br>ps：经常拿来代替 <code>if</code></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">if</span> (i) &#123;<br>  <span class=\"hljs-selector-tag\">doSomething</span>();<br>&#125;<br><span class=\"hljs-comment\">// 等价于</span><br><span class=\"hljs-selector-tag\">i</span> <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-tag\">&amp;</span> <span class=\"hljs-selector-tag\">doSomething</span>();<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-或运算符：\"><a href=\"#3-或运算符：\" class=\"headerlink\" title=\"3.或运算符：||\"></a>3.或运算符：<code>||</code></h4><p>它的运算规则是：如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为false，则返回第二个运算子的值。<br>ps：经常拿来设置一个变量的默认值</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">String</span>() || <span class=\"hljs-string\">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-三元运算符：\"><a href=\"#4-三元运算符：\" class=\"headerlink\" title=\"4.三元运算符：?:\"></a>4.三元运算符：<code>?:</code></h4><p>三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为true，则返回第二个表达式的值，否则返回第三个表达式的值。<br>ps: 经常拿来代替if else 非常的简便好用,而且具有返回值</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">const</span> isBoy = sex===<span class=\"hljs-string\">&#x27;男&#x27;</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>二进制位运算符用于直接对二进制位进行计算，一共有7个。</p>\n<ul>\n<li>二进制或运算符（or）：符号为<code>|</code>，表示若两个二进制位都为0，则结果为0，否则为1。</li>\n<li>二进制与运算符（and）：符号为<code>&amp;</code>，表示若两个二进制位都为1，则结果为1，否则为0。</li>\n<li>二进制否运算符（not）：符号为<code>~</code>，表示对一个二进制位取反。</li>\n<li>异或运算符（xor）：符号为<code>^</code>，表示若两个二进制位不相同，则结果为1，否则为0。</li>\n<li>左移运算符（left shift）：符号为<code>&lt;&lt;</code>。</li>\n<li>右移运算符（right shift）：符号为<code>&gt;&gt;</code>。</li>\n<li>头部补零的右移运算符（zero filled right shift）：符号为<code>&gt;&gt;&gt;</code>。</li>\n</ul>\n<p>有一点需要特别注意，位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。</p>\n<p>前四个根据上面的字面意思自己理解，这里写一些比较有意思的位运算操作:  </p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 把i转成成一个整数<br>i = i | <span class=\"hljs-number\">0</span> <br><br><span class=\"hljs-regexp\">//</span> 不依赖第三个变量交换ab的值<br>var a = <span class=\"hljs-number\">10</span>;<br>var b = <span class=\"hljs-number\">99</span>;<br>a ^= b, b ^= a, a ^= b;<br>a <span class=\"hljs-regexp\">//</span> <span class=\"hljs-number\">99</span><br>b <span class=\"hljs-regexp\">//</span> <span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"左移运算符-lt-lt\"><a href=\"#左移运算符-lt-lt\" class=\"headerlink\" title=\"左移运算符 &lt;&lt;\"></a>左移运算符 <code>&lt;&lt;</code></h4><p>左移运算符（&lt;&lt;）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。向左移动的时候，最高位的符号位是一起移动的。</p>\n<h4 id=\"右移运算符-gt-gt\"><a href=\"#右移运算符-gt-gt\" class=\"headerlink\" title=\"右移运算符 &gt;&gt;\"></a>右移运算符 <code>&gt;&gt;</code></h4><p>右移运算符（&gt;&gt;）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补0；如果是负数，头部全部补1。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。</p>\n<h4 id=\"左移运算符-gt-gt-gt\"><a href=\"#左移运算符-gt-gt-gt\" class=\"headerlink\" title=\"左移运算符 &gt;&gt;&gt;\"></a>左移运算符 <code>&gt;&gt;&gt;</code></h4><p>头部补零的右移运算符（&gt;&gt;&gt;）与右移运算符（&gt;&gt;）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（&gt;&gt;）完全一致，区别主要在于负数。<br>查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">-<span class=\"hljs-number\">1</span> &gt;&gt;&gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span> <span class=\"hljs-number\">4294967295</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":3206,"excerpt":"<p>此篇是博主在阅读这两本JavaScript入门书籍时记得一些笔记，以及一些知识点，长期更新，文中有错误欢迎指正，有不同理解欢迎交流。</p>","more":"<h2 id=\"一-数据类型\"><a href=\"#一-数据类型\" class=\"headerlink\" title=\"一.数据类型\"></a>一.数据类型</h2><p>在es5之前总共有：<em>null</em> <em>undefined</em> <em>boolean</em> <em>object</em> <em>function</em> <em>number</em> 六种数据类型，es6新增了 <em>symbol</em> ,es11新增了 <em>bigint</em> </p>\n<p>所以截止es2021，目前总共有：<em>null</em> <em>undefined</em> <em>boolean</em> <em>object</em> <em>function</em> <em>number</em> <em>symbol</em> <em>bigint</em> 基本数据类型</p>\n<p>ps：这些也是 <code>typeof</code> 能返回的所有值</p>\n<h3 id=\"数据类型判断的三个原生方法\"><a href=\"#数据类型判断的三个原生方法\" class=\"headerlink\" title=\"数据类型判断的三个原生方法\"></a>数据类型判断的三个原生方法</h3><h4 id=\"1-typeof\"><a href=\"#1-typeof\" class=\"headerlink\" title=\"1.typeof\"></a>1.<code>typeof</code></h4><p>数值、字符串、布尔值分别返回number、string、boolean，函数返回function，undefined返回undefined，对象返回object，null返回object。</p>\n<p>ps：<code>typeof null // object</code> 其实是历史原因,1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑null，只把它当作object的一种特殊值。后来null独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null返回object就没法改变了。</p>\n<h4 id=\"2-instanceof\"><a href=\"#2-instanceof\" class=\"headerlink\" title=\"2.instanceof\"></a>2.<code>instanceof</code></h4><p><code>instanceof</code> 运算符返回一个布尔值，表示对象是否为某个构造函数的实例。</p>\n<p><code>instanceof</code> 是基于原型链查找，运算符的左边是实例对象，右边是构造函数。它会检查右边构造函数的原型对象（prototype），是否在左边对象的原型链上。因此，下面两种写法是等价的。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">const v = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Vehicle()</span><br>v instanceof Vehicle<br><span class=\"hljs-comment\">// 等同于</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Vehicle</span>.</span></span>prototype.is<span class=\"hljs-constructor\">PrototypeOf(<span class=\"hljs-params\">v</span>)</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"3-Object-prototype-toString\"><a href=\"#3-Object-prototype-toString\" class=\"headerlink\" title=\"3.Object.prototype.toString\"></a>3.<code>Object.prototype.toString</code></h4><p>因为大部分数据类型都自定义重写了toString方法，一次可以根据此方法的返回值去判断数据类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">数值：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Number</span>]。<br>字符串：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">String</span>]。<br>布尔值：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Boolean</span>]。<br><span class=\"hljs-literal\">undefined</span>：返回[<span class=\"hljs-built_in\">object</span> Undefined]。<br><span class=\"hljs-literal\">null</span>：返回[<span class=\"hljs-built_in\">object</span> Null]。<br>数组：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Array</span>]。<br><span class=\"hljs-built_in\">arguments</span> 对象：返回[<span class=\"hljs-built_in\">object</span> Arguments]。<br>函数：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Function</span>]。<br><span class=\"hljs-built_in\">Error</span> 对象：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Error</span>]。<br><span class=\"hljs-built_in\">Date</span> 对象：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Date</span>]。<br><span class=\"hljs-built_in\">RegExp</span> 对象：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">RegExp</span>]。<br>其他对象：返回[<span class=\"hljs-built_in\">object</span> <span class=\"hljs-built_in\">Object</span>]。<br>symbol对象：返回<span class=\"hljs-built_in\">Symbol</span>()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"二-运算符\"><a href=\"#二-运算符\" class=\"headerlink\" title=\"二.运算符\"></a>二.运算符</h2><p>加法运算符：<code>x + y</code><br>减法运算符： <code>x - y</code><br>乘法运算符： <code>x * y</code><br>除法运算符：<code>x / y</code><br>指数运算符：<code>x ** y</code><br>余数运算符：<code>x % y</code><br>自增运算符：<code>++x 或者 x++</code><br>自减运算符：<code>--x 或者 x--</code><br>数值运算符： <code>+x</code><br>负数值运算符：<code>-x</code>  </p>\n<h3 id=\"加法运算符\"><a href=\"#加法运算符\" class=\"headerlink\" title=\"加法运算符 +\"></a>加法运算符 <code>+</code></h3><p>上面这些运算符号值得说的其实就是 <code>+</code> 运算符，加法运算符是在运行时决定，到底是执行相加，还是执行连接。也就是说，运算子的不同，导致了不同的语法行为，这种现象称为“重载”（overload）。<br>比如：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span>+ true // <span class=\"hljs-number\">2</span><br><span class=\"hljs-comment\">&#x27;3&#x27; + 4 + 5 // &quot;345&quot;</span><br><span class=\"hljs-symbol\">3 </span>+ <span class=\"hljs-number\">4</span> + <span class=\"hljs-comment\">&#x27;5&#x27; // &quot;75&quot;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"指数运算符\"><a href=\"#指数运算符\" class=\"headerlink\" title=\"指数运算符 **\"></a>指数运算符 <code>**</code></h3><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">2 </span>** <span class=\"hljs-number\">4</span> // <span class=\"hljs-number\">16</span><br></code></pre></td></tr></table></figure>\n<p>指数运算符需要注意的是，指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 相当于 <span class=\"hljs-number\">2</span> ** (<span class=\"hljs-number\">3</span> ** <span class=\"hljs-number\">2</span>)<br> <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">3</span> ** <span class=\"hljs-number\">2</span><br><span class=\"hljs-regexp\">//</span> <span class=\"hljs-number\">512</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h3><p>布尔运算符就以下四种：  </p>\n<ul>\n<li>取反运算符：<code>!</code></li>\n<li>且运算符：<code>&amp;&amp;</code></li>\n<li>或运算符：<code>||</code></li>\n<li>三元运算符：<code>?:</code></li>\n</ul>\n<h4 id=\"1-取反运算符：\"><a href=\"#1-取反运算符：\" class=\"headerlink\" title=\"1.取反运算符：!\"></a>1.取反运算符：<code>!</code></h4><p><code>!</code>运算符会把布尔值变成相反值，值得注意的是也能对非布尔值取反，只要记住以下取反是<code>true</code>其他都是<code>false</code>:  </p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>&#39;&#39;</code></li>\n</ul>\n<p>小tips：对一个变量两次取反就是把变量变成对应的<code>boolean</code>值，相当于<code>Boolean()</code>方法</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">!!x<br><span class=\"hljs-comment\">// 等同于</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">Boolean</span><span class=\"hljs-params\">(x)</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-且运算符：-amp-amp\"><a href=\"#2-且运算符：-amp-amp\" class=\"headerlink\" title=\"2.且运算符：&amp;&amp;\"></a>2.且运算符：<code>&amp;&amp;</code></h4><p>它的运算规则是：如果第一个运算子的布尔值为 <code>true</code>，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为 <code>false</code>，则直接返回第一个运算子的值，且不再对第二个运算子求值。<br>ps：经常拿来代替 <code>if</code></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">if</span> (i) &#123;<br>  <span class=\"hljs-selector-tag\">doSomething</span>();<br>&#125;<br><span class=\"hljs-comment\">// 等价于</span><br><span class=\"hljs-selector-tag\">i</span> <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-tag\">&amp;</span> <span class=\"hljs-selector-tag\">doSomething</span>();<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-或运算符：\"><a href=\"#3-或运算符：\" class=\"headerlink\" title=\"3.或运算符：||\"></a>3.或运算符：<code>||</code></h4><p>它的运算规则是：如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为false，则返回第二个运算子的值。<br>ps：经常拿来设置一个变量的默认值</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">String</span>() || <span class=\"hljs-string\">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-三元运算符：\"><a href=\"#4-三元运算符：\" class=\"headerlink\" title=\"4.三元运算符：?:\"></a>4.三元运算符：<code>?:</code></h4><p>三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为true，则返回第二个表达式的值，否则返回第三个表达式的值。<br>ps: 经常拿来代替if else 非常的简便好用,而且具有返回值</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">const</span> isBoy = sex===<span class=\"hljs-string\">&#x27;男&#x27;</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>二进制位运算符用于直接对二进制位进行计算，一共有7个。</p>\n<ul>\n<li>二进制或运算符（or）：符号为<code>|</code>，表示若两个二进制位都为0，则结果为0，否则为1。</li>\n<li>二进制与运算符（and）：符号为<code>&amp;</code>，表示若两个二进制位都为1，则结果为1，否则为0。</li>\n<li>二进制否运算符（not）：符号为<code>~</code>，表示对一个二进制位取反。</li>\n<li>异或运算符（xor）：符号为<code>^</code>，表示若两个二进制位不相同，则结果为1，否则为0。</li>\n<li>左移运算符（left shift）：符号为<code>&lt;&lt;</code>。</li>\n<li>右移运算符（right shift）：符号为<code>&gt;&gt;</code>。</li>\n<li>头部补零的右移运算符（zero filled right shift）：符号为<code>&gt;&gt;&gt;</code>。</li>\n</ul>\n<p>有一点需要特别注意，位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。另外，虽然在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。</p>\n<p>前四个根据上面的字面意思自己理解，这里写一些比较有意思的位运算操作:  </p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 把i转成成一个整数<br>i = i | <span class=\"hljs-number\">0</span> <br><br><span class=\"hljs-regexp\">//</span> 不依赖第三个变量交换ab的值<br>var a = <span class=\"hljs-number\">10</span>;<br>var b = <span class=\"hljs-number\">99</span>;<br>a ^= b, b ^= a, a ^= b;<br>a <span class=\"hljs-regexp\">//</span> <span class=\"hljs-number\">99</span><br>b <span class=\"hljs-regexp\">//</span> <span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"左移运算符-lt-lt\"><a href=\"#左移运算符-lt-lt\" class=\"headerlink\" title=\"左移运算符 &lt;&lt;\"></a>左移运算符 <code>&lt;&lt;</code></h4><p>左移运算符（&lt;&lt;）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。向左移动的时候，最高位的符号位是一起移动的。</p>\n<h4 id=\"右移运算符-gt-gt\"><a href=\"#右移运算符-gt-gt\" class=\"headerlink\" title=\"右移运算符 &gt;&gt;\"></a>右移运算符 <code>&gt;&gt;</code></h4><p>右移运算符（&gt;&gt;）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补0；如果是负数，头部全部补1。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。</p>\n<h4 id=\"左移运算符-gt-gt-gt\"><a href=\"#左移运算符-gt-gt-gt\" class=\"headerlink\" title=\"左移运算符 &gt;&gt;&gt;\"></a>左移运算符 <code>&gt;&gt;&gt;</code></h4><p>头部补零的右移运算符（&gt;&gt;&gt;）与右移运算符（&gt;&gt;）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（&gt;&gt;）完全一致，区别主要在于负数。<br>查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">-<span class=\"hljs-number\">1</span> &gt;&gt;&gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-regexp\">//</span> <span class=\"hljs-number\">4294967295</span><br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckv8bf38n00026rgs2gxo0z1i","category_id":"ckv8bitrs00036rgseh1s6bfu","_id":"ckv8bitrt00046rgshjsx0c1o"}],"PostTag":[{"post_id":"ckv8bf38n00026rgs2gxo0z1i","tag_id":"ckv8bjexz000b6rgsbis49ss5","_id":"ckv8bjexz000c6rgs5o9t4idb"},{"post_id":"ckv8bf38n00026rgs2gxo0z1i","tag_id":"ckv8bjnc6000f6rgs3vf89rjp","_id":"ckv8bjnc7000g6rgscacdhkz6"},{"post_id":"ckv8bf38n00026rgs2gxo0z1i","tag_id":"ckv8blokw000n6rgs7jimd183","_id":"ckv8blokx000o6rgsfdtj52bu"}],"Tag":[{"name":"笔记","_id":"ckv8bjexz000b6rgsbis49ss5"},{"name":"’‘","_id":"ckv8bjjbb000d6rgs0kab314o"},{"name":"学习","_id":"ckv8bjnc6000f6rgs3vf89rjp"},{"name":"js","_id":"ckv8bjvhr000h6rgscyav4z8k"},{"name":"’JavaScript‘","_id":"ckv8bl9th000j6rgs16aw04p4"},{"name":"’JavaScript","_id":"ckv8blmpn000l6rgs9sv43vl7"},{"name":"JavaScript","_id":"ckv8blokw000n6rgs7jimd183"}]}}